import os

import django
import telebot
from django.contrib.auth import get_user_model
from dotenv import load_dotenv
from telebot import types

load_dotenv()

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()
from user.models import PendingTelegramTicket  # NOQA E402

token = os.getenv("TELEGRAM_TOKEN")
if token is None:
    token = "123456:dummy"

bot = telebot.TeleBot(token)


@bot.message_handler(commands=["start"])
def start_handler(message):
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    button_contact = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
    button_ticket = types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç")
    keyboard.add(button_contact, button_ticket)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∏–ª–µ—Ç–æ–≤ üé´\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
        "2Ô∏è‚É£ –ò–ª–∏ '–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç', –µ—Å–ª–∏ —Ç—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∫–æ–Ω—Ç–∞–∫—Ç —Ä–∞–Ω–µ–µ",
        reply_markup=keyboard,
    )


@bot.message_handler(content_types=["contact"])
def contact_handler(message):
    if message.contact:
        phone_number = message.contact.phone_number
        print(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {phone_number}")
        print(f"ID chat: {message.chat.id}")

        try:
            user = get_user_model().objects.get(phone=phone_number)
            bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ, {user.email}! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω—è—Ç.")
            user.telegram_chat_id = message.chat.id
            user.save()
        except get_user_model().DoesNotExist:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç")
def get_ticket_handler(message):
    try:
        user = get_user_model().objects.get(telegram_chat_id=message.chat.id)
    except get_user_model().DoesNotExist:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
        return

    pending_tickets = PendingTelegramTicket.objects.filter(user=user, sent=False)

    if not pending_tickets.exists():
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.")
        return

    for ticket in pending_tickets:
        try:
            with open(ticket.pdf_path, "rb") as pdf_file:
                bot.send_document(message.chat.id, pdf_file, caption="–í–∞—à –±–∏–ª–µ—Ç üéüÔ∏è")
            ticket.sent = True
            ticket.save()
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞:", e)
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–ª–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


if __name__ == "__main__":
    bot.polling(none_stop=False)
